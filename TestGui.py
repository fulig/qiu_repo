# Form implementation generated from reading ui file 'designer_qiu_qiu.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import threading
from PyQt6 import QtGui, QtWidgets
from PyQt6.QtCore import QDateTime
import pyqtgraph
from Qiup import *
from Gui import *  
from voltages import *

class MainWindow(QtWidgets.QMainWindow, Ui_Quip_test):
    def __init__(self, *args, obj=None, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.connect_state = 0
        self.measure_state = False
        self.data_number = 20*16
        self.measure_data = np.empty(self.data_number)
        
        self.default_values()
        self.gui = Ui_Quip_test()
        self.qiup = Qiup(debug=False)
        self.default_values()
        self.connect_gui()

        self.graph_timer = QtCore.QTimer()
        self.graph_timer.timeout.connect(self.update_serial_data)
        self.idx_count = 0

    def default_values(self):
        self.connect_state = 0
        self.retrigger.setChecked(True)
        self.retrigger_sec.setValue(7)
        self.leds = [self.led1,self.led2,self.led3,self.led4,self.led5,self.led6,self.led7,self.led8]
        self.dim_leds = ["R","G","B"]
        self.dim_slider = [self.Red, self.Green, self.Blue]
        self.red_label.setStyleSheet("color:red")
        self.green_label.setStyleSheet("color:green")
        self.blue_label.setStyleSheet("color : blue")
        self.datetime_qiu.setDateTime(self.datetime_qiu.minimumDateTime())
        self.datetime_pc.setDateTime(QDateTime.currentDateTime())

        self.flash_table.resizeColumnsToContents()
        self.flash_table_qui.resizeColumnsToContents()
        self.flash_table_qui.setDisabled(1)
        
        self.graph.setYRange(0, 5000, padding=0)
        self.graph.setXRange(0, self.data_number, padding=0)
        self.curve = self.graph.plot()

        self.line_edits = [self.accu_line, self.usb_line, self.dig_line,
                           self.x_value, self.y_value, self.z_value, 
                           self.earclip_line, self.gain_line, 
                           self.api_version_text, self.app_version_text, 
                           self.qiup_name, self.button_state, self.charge_line]
        #print(QDateTime.currentDateTime())

    def connect_gui(self):
        self.setup_led_buttons()
        self.connect.clicked.connect(self.register)    
        self.app_version.clicked.connect(self.get_app_version)
        self.api_version.clicked.connect(self.get_api_version)
        
        self.led_on.clicked.connect(self.ledbar_on)
        self.led_off.clicked.connect(self.ledbar_off)
        self.led_power_on.clicked.connect(self.led_power_control)
        self.Red.valueChanged.connect(self.red_slider)
        self.Green.valueChanged.connect(self.green_slider)
        self.Blue.valueChanged.connect(self.blue_slider)
        
        self.get_datetime_qiu.clicked.connect(self.get_datetime)
        self.set_datetime_pc.clicked.connect(self.set_datetime)
        
        self.check_button.clicked.connect(self.get_button_state)
        self.play_sound.clicked.connect(self.sound_play)
        
        self.charge_state.clicked.connect(self.get_charge_state)
        self.accu_voltage.clicked.connect(self.get_accu_voltage)
        self.usb_voltage.clicked.connect(self.get_usb_voltage)
        self.digital_voltage.clicked.connect(self.get_digital_voltage)
        self.all_voltages.clicked.connect(self.get_all_voltages)
        
        self.get_accl_btn.clicked.connect(self.get_accel)

        self.erase_button.clicked.connect(self.erase_flash)
        self.read_button.clicked.connect(self.read_flash)
        self.fill_button.clicked.connect(self.fill_flash)
        self.write_button.clicked.connect(self.write_flash)

        self.earclip_btn.clicked.connect(self.get_earclip_state)
        
        self.set_gain_btn.clicked.connect(self.set_gain)
        self.get_gain_btn.clicked.connect(self.get_gain)

        self.analog_btn.clicked.connect(self.analog_power)
        self.irled_ext_btn.clicked.connect(self.irled_ext_control)
        self.irled_int_btn.clicked.connect(self.irled_int_control)

        self.start_measure_btn.clicked.connect(self.start_measure)
        self.stop_measure_btn.clicked.connect(self.stop_measure)
        self.setup_flash_table()

    def reset_fields(self):
        for line_field in self.line_edits:
            line_field.setText("")
            line_field.setStyleSheet("")
        self.setup_flash_table()
        self.datetime_qiu.setDateTime(self.datetime_qiu.minimumDateTime())
        self.measure_data = np.empty(self.data_number)
        self.curve.setData(self.measure_data)
        self.analog_btn.setText("On")
        self.irled_ext_btn.setText("On")
        self.irled_int_btn.setText("On")

    def setup_flash_table(self):
        for i in range(32):
            item = QtWidgets.QTableWidgetItem("FF")
            q_item = QtWidgets.QTableWidgetItem("--")
            self.flash_table.setItem(0,i ,item)
            self.flash_table_qui.setItem(0,i, q_item)

    def register(self):
        button_text = self.connect.text()
        self.qiup_name.setText("")
        if button_text == "Connect":
            self.qiup.get_avail_dev()
            self.qiup.setup_serial()
            self.retrigger_state  = int(self.retrigger.isChecked())
            self.connect_state = self.qiup.register(self.retrigger_state)
            self.qiup.control_power(0, QP_API_ANALOG_SUPPLY_VOLTAGE)
            self.power_line.setText("Off")
            self.qiup.control_irled_ext(0)
            self.irled_ext_line.setText("Off")
            self.qiup.control_irled_intern(0)
            self.irled_int_line.setText("Off")
            if self.connect_state == None:
                self.qiup.close_serial()
                self.connect.setText("Connect")
                self.qiup_name.setStyleSheet("background-color: red")
                self.qiup_name.setText("NO CONNECTION")
                return
            else:
                self.get_api_version()
                self.get_app_version()
                self.qiup_name.setStyleSheet("background-color: green")
                self.connect.setText( "Release")
                if self.retrigger_state == 1:
                    print("Starting retrigger timer.")
                    self.repeat_time = self.retrigger_sec.value()
                    self.retrigger_timer()
                self.qiup_name.setText(self.qiup.name)
        if button_text == "Release":
            if self.retrigger_state == 1:
                self.timer.cancel()
            if self.measure_state == True:
                self.stop_measure()
            self.ledbar_off()
            self.connect_state = self.qiup.release()
            self.qiup.close_serial()
            self.connect.setText("Connect")
            self.reset_fields()
    
    def retrigger_timer(self):
        if self.connect_state == 0:
            self.timer.cancel()
        else:
            self.qiup.register_retrigger()
            print("Retriggering...")
            self.timer = threading.Timer(self.repeat_time, self.retrigger_timer)
            self.timer.start()

    def setup_led_buttons(self):
        for led in self.leds:
            led.clicked.connect(self.set_ledbar)
        return
    
    def led_power_control(self):
        state_str = self.led_power_on.text()
        if state_str == "Off":
            self.qiup.control_power(0,QP_API_LED_SUPPLY_VOLTAGE)
            self.led_power_on.setText("On")
        if state_str == "On":
            self.qiup.control_power(1,QP_API_LED_SUPPLY_VOLTAGE)
            self.led_power_on.setText("Off")
    
    def set_ledbar(self):
        if self.connect_state == 1:
            led_bar = []
            for led in self.leds:
                led_bar.append(int(led.isChecked()))
            self.qiup.ledbar_control(led_bar)
        if self.connect_state == 0:
            print("Not Connected, Please register first.")
        return
       
    def red_slider(self):
        value = self.Red.value()
        self.red_value.setText(f"{value}/65")
        self.qiup.dim_led("R", value)

    def green_slider(self):
        value = self.Green.value()
        self.green_value.setText(f"{value}/65")
        self.qiup.dim_led("G", value)
    
    def blue_slider(self):
        value = self.Blue.value()
        self.blue_value.setText(f"{value}/65")
        self.qiup.dim_led("B", value)

    def get_datetime(self):
        qiup_dt = self.qiup.get_datetime()
        qiup_qt_dt = QtCore.QDateTime(int(qiup_dt[0]), int(qiup_dt[1]), 
                                      int(qiup_dt[2]), int(qiup_dt[3]), 
                                      int(qiup_dt[4]), int(qiup_dt[5]))
        self.datetime_qiu.setDateTime(qiup_qt_dt)

    def set_datetime(self):
        now = QDateTime.currentDateTime()
        self.datetime_pc.setDateTime(now)
        self.qiup.set_time_from_pc()

    def get_button_state(self):
        btn = self.qiup.pushbutton_state()
        if btn == 0:
            self.button_state.setText("Open")
        if btn == 1:
            self.button_state.setText("Close")

    def sound_play(self):
        sound_nr = int(self.spin_sound.value())
        self.qiup.play_sound(sound_nr)

    def get_accel(self):
        x,y,z = self.qiup.get_accel()
        if type(x) is str:
            self.x_value.setText(x)
            self.y_value.setText(y)
            self.z_value.setText(z)
        if type(x) is float:
            self.x_value.setText(f"{x:.2f}")
            self.y_value.setText(f"{y:.2f}")
            self.z_value.setText(f"{z:.2f}")

    def get_api_version(self):
        api_version = self.qiup.get_api_version()
        self.api_version_text.setText(api_version)
        return
    
    def get_app_version(self):
        app_version = self.qiup.get_appl_version()
        self.app_version_text.setText(app_version)
        return
    
    def ledbar_on(self):
        for i,led in enumerate(self.dim_slider):
            led.setValue(32)
        self.qiup.ledbar_control([1,1,1,1,1,1,1,1])
        for led in self.leds:
            led.setChecked(True)
    
    def ledbar_off(self):
        for i,led in enumerate(self.dim_slider):
            led.setValue(0)
        self.qiup.ledbar_control([0,0,0,0,0,0,0,0])
        for led in self.leds:
            led.setChecked(False)

    def fill_flash(self):
        data_string = ""
        for i in range(32):
            data = f"{i:02X}"
            data_string = data_string + data
            item = QtWidgets.QTableWidgetItem(data)
            self.flash_table.setItem(0,i ,item)

    def read_flash(self):
        sector = self.sector_spin.value()
        part = self.part_spin.value()
        data = self.qiup.read_flash(sector, part)
        data_string = str(data).lstrip("b'").rstrip("'")
        for i in range(32):
            item = QtWidgets.QTableWidgetItem(data_string[2*i:2*i+2])
            self.flash_table_qui.setItem(0,i, item)

    def write_flash(self):
        part = self.part_spin.value()
        sector = self.sector_spin.value()
        data_string = ""
        for i in range(32):
            data_string = data_string + self.flash_table.item(0,i).text()
        self.qiup.write_flash(sector, part, data_string)

    def erase_flash(self):
        sector = self.sector_spin.value()
        state = self.qiup.erase_flash(sector)
        print(state)

    def get_earclip_state(self):
        state = self.qiup.check_earclip()
        if state == 0:
            self.earclip_line.setText("Not Connected.")
            self.earclip_line.setStyleSheet("background-color : red")
        if state == 1:
            self.earclip_line.setText("Connected.")
            self.earclip_line.setStyleSheet("background-color : green")
    
    def analog_power(self):
        state = self.analog_btn.text()
        if state == "On":
            self.qiup.control_power(1, QP_API_ANALOG_SUPPLY_VOLTAGE)
            self.power_line.setText("On")
            self.analog_btn.setText("Off")
        if state == "Off":
            self.qiup.control_power(0, QP_API_ANALOG_SUPPLY_VOLTAGE)
            self.power_line.setText("Off")
            self.analog_btn.setText("On")

    def irled_int_control(self):
        state = self.irled_int_btn.text()
        if state == "On":
            self.qiup.control_irled_intern(1)
            self.irled_int_line.setText("On")
            self.irled_int_btn.setText("Off")
        if state == "Off":
            self.qiup.control_irled_intern(0)
            self.irled_int_line.setText("Off")
            self.irled_int_btn.setText("On")
    
    def irled_ext_control(self):
        state = self.irled_ext_btn.text()
        if state == "On":
            self.qiup.control_irled_ext(1)
            self.irled_ext_line.setText("On")
            self.irled_ext_btn.setText("Off")
        if state == "Off":
            self.qiup.control_irled_ext(0)
            self.irled_ext_line.setText("Off")
            self.irled_ext_btn.setText("On")

    def get_gain(self):
        stage = self.qiup.get_gain()
        self.gain_line.setText(str(stage))

    def set_gain(self):
        stage = int(self.gain_spin.value())
        self.qiup.set_gain(stage)

    def get_charge_state(self):
        charge_state = self.qiup.get_charge_state()
        match charge_state:
            case b'0A':
                self.charge_line.setText("NOBAT")
            case b'0B':
                self.charge_line.setText("NOTCH")
            case b'0C':
                self.charge_line.setText("PRFCH")
            case b'0D':
                self.charge_line.setText("TPOCH")
            case b'0E':
                self.charge_line.setText("MAINT")
            case b'0F':
                self.charge_line.setText("FAULT")

    def get_accu_voltage(self):
        voltage = round(float(self.qiup.get_voltage(QP_API_ACCU_VOLTAGE)),3)
        self.accu_line.setText(f"{voltage:.3f}")

    def get_usb_voltage(self):
        voltage = round(float(self.qiup.get_voltage(QP_API_USB_VOLTAGE)),3)
        self.usb_line.setText(f"{voltage:.3f}")
    
    def get_digital_voltage(self):
        voltage = round(float(self.qiup.get_voltage(QP_API_DIG_SUPPLY_VOLTAGE)),3)
        self.dig_line.setText(f"{voltage:.3f}")
    
    def get_all_voltages(self):
        self.get_accu_voltage()
        self.get_usb_voltage()
        self.get_digital_voltage()

    def start_measure(self):
        self.measure_state = True
        if self.retrigger_state == 1:
            self.timer.cancel()
            self.qiup.release()
            self.qiup.register()
        self.qiup.start_measure()
        self.graph_timer.start()

    def stop_measure(self):
        self.measure_state = False
        if self.retrigger_state == 1:
            self.qiup.release()
            self.qiup.register(1)
        self.qiup.stop_measure()
        self.graph_timer.stop()
        self.idx_count = 0
        self.measure_data = np.empty(self.data_number)
        self.curve.setData(self.measure_data)

    def update_serial_data(self):
        if self.idx_count >= self.data_number:
            self.idx_count = self.idx_count - self.data_number
        measure_data = self.qiup.get_measurement_data()
        if self.idx_count + len(measure_data) <= self.data_number:
            self.measure_data[self.idx_count:self.idx_count+len(measure_data)] = measure_data
            self.idx_count = self.idx_count + len(measure_data)
        elif self.idx_count + len(measure_data) > self.data_number:
            diff_end = self.data_number - self.idx_count
            diff_begin = self.idx_count + len(measure_data) - self.data_number
            self.measure_data[self.idx_count:] = measure_data[:diff_end]
            self.measure_data[:diff_begin] = measure_data[diff_end:]
            self.idx_count = diff_begin
        self.curve.setData(self.measure_data)
    
    def closeEvent(self, *args, **kwargs):
        super(QtWidgets.QMainWindow, self).closeEvent(*args, **kwargs)
        if self.connect_state == 1:
            if self.retrigger_state == 1:
                self.timer.cancel()
            if self.measure_state == True:
                self.stop_measure()
            self.ledbar_off()
            self.qiup.release()
            self.qiup.close_serial()  

app = QtWidgets.QApplication(sys.argv)

window = MainWindow()
window.show()
app.exec()